name: Main blisterbox workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: blisterbox_user
          POSTGRES_PASSWORD: blisterbox_password
          POSTGRES_DB: blisterbox
        ports: ["5432:5432"]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7
        ports: ["6379:6379"]
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install OS deps for cairo
        run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev pkg-config python3-dev libffi-dev

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r ./backend/requirements.txt

      - name: Django tests
        env:
          POSTGRES_USER: blisterbox_user
          POSTGRES_PASSWORD: blisterbox_password
          POSTGRES_DB: blisterbox
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
        run: |
          cd backend/
          # –°–æ–∑–¥–∞–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –±–ª–æ–≥–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
          python manage.py migrate
          python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: tests # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤
    steps:
    - name: Prune old Docker images
      run: |
        sudo docker system prune -f --all
    # –û—á–∏—â–∞–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ —Å–µ—Ç–∏. –¢–æ–º–æ–≤ –Ω–µ –∫–∞—Å–∞–µ—Ç—Å—è.

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É: –¥–µ–ø–ª–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±–æ—Ä—â–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Docker
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ Docker Hub
        uses: docker/login-action@v2
        # –ü—Ä–∏ –ø–æ–º–æ—â–∏ with –ø–µ—Ä–µ–¥–∞—ë–º –≤ action –ø–∞—Ä–∞–º–µ—Ç—Ä—ã username –∏ password
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          # –•–æ—Ä–æ—à–æ –ª–∏ –¥–µ—Ä–∂–∞—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ workflow?
          # –ù–µ—Ç, —ç—Ç–æ –Ω–µ—Ö–æ—Ä–æ—à–æ
      - name: Push to DockerHub
        # –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –±–∏–ª–¥ –∏ –ø—É—à –æ–±—Ä–∞–∑–∞ –≤ Docker Hub
        uses: docker/build-push-action@v4
        with:
          # –ü–∞—Ä–∞–º–µ—Ç—Ä context: ./backend/ —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω—ã–π Dockerfile 
          # –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ ./backend/
          context: ./backend/
          # –ü–∞—Ä–∞–º–µ—Ç—Ä push: true —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –æ–±—Ä–∞–∑ –Ω—É–∂–Ω–æ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–æ–±—Ä–∞—Ç—å,
          # –Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ Docker Hub
          push: true
          # –í –ø–∞—Ä–∞–º–µ—Ç—Ä–µ tags –∑–∞–¥–∞—ë—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–µ–≥ –¥–ª—è –æ–±—Ä–∞–∑–∞.
          # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ 
          # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–≥ latest, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º
          # –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ –≤ docker-compose.yml –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –≤–µ—Ä—Å–∏—é
          tags: egorovdocker/blisterbox_backend:latest

  frontend_tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up nodeJS
      # –≠—Ç–æ –≥–æ—Ç–æ–≤—ã–π –≤–æ—Ä–∫—Ñ–ª–æ—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js –Ω–∞ —Ä–∞–Ω–Ω–µ—Ä
      uses: actions/setup-node@v3
      with:
        # –≠—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤–æ—Ä–∫—Ñ–ª–æ—É, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω—É–∂–Ω—É—é –≤–µ—Ä—Å–∏—é Node.js
        node-version: 18

#Workflow –¥–ª—è Nginx –æ–±—Ä–∞–∑ —Å –∫–æ–Ω—Ñ–∏–≥–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ Docker Hub
  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: true
          # –¢—É—Ç –≤–º–µ—Å—Ç–æ username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à –ª–æ–≥–∏–Ω –Ω–∞ Docker Hub
          tags: egorovdocker/blisterbox_gateway:latest

#Workflow –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –±–æ–µ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ
  deploy:
    runs-on: ubuntu-latest
    needs: 
      # –î–æ–∂–¥—ë–º—Å—è –±–∏–ª–¥–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–∑–æ–≤
      - build_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    # –ö–æ–ø–∏—Ä—É–µ–º docker-compose.production.yml –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω-—Å–µ—Ä–≤–µ—Ä
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
    # –ü–µ—Ä–µ–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è action appleboy/scp-action:
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "blisterbox"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        # –ü–∞—Ä–∞–º–µ—Ç—Ä script –ø–µ—Ä–µ–¥–∞—ë—Ç –≤ action appleboy/ssh-action –∫–æ–º–∞–Ω–¥—ã,
        # –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, 
        # —Å –∫–æ—Ç–æ—Ä—ã–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        script: |
          cd blisterbox
          # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Docker Hub
          echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

          # –û–ß–ò–°–¢–ö–ê: —É–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ —Å–µ—Ç–∏. –¢–æ–º–æ–≤ –Ω–µ –∫–∞—Å–∞–µ—Ç—Å—è.
          sudo docker system prune -f
          
          # –í—ã–ø–æ–ª–Ω—è–µ—Ç pull –æ–±—Ä–∞–∑–æ–≤ —Å Docker Hub
          sudo docker compose -f docker-compose.production.yml pull
          
          # –ë–ï–ó–û–ü–ê–°–ù–´–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö: —Ç–æ–ª—å–∫–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –ë–î –∏ Redis –æ—Å—Ç–∞—é—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å
          echo "üîÑ Restarting application services..."
          sudo docker compose -f docker-compose.production.yml up -d --no-deps backend gateway reviews-updater
          
          # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
          echo "‚è≥ Waiting for services to start..."
          sleep 30
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
          sudo docker compose -f docker-compose.production.yml ps
          
          # –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –û–ß–ò–°–¢–ö–ê: —Ç–æ–ª—å–∫–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –ù–ï –¢–û–ú–ê
          echo "üßπ Safe cleanup (preserving data)..."
          sudo docker container prune -f
          sudo docker image prune -f
          
          # –û–ß–ò–°–¢–ö–ê REDIS –ù–ï –ù–£–ñ–ù–ê: Redis –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ—á–∏—Å—Ç–∫–∏
          echo "‚ÑπÔ∏è Redis cleanup skipped - automatic cleanup is configured with maxmemory-policy"
                
          # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π
          echo "üîÑ Running all migrations..."
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          
          # üåê –ö–æ–º–ø–∏–ª—è—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
          echo "üåç Compiling messages..."
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py compilemessages
          
          # üìÅ –°–±–æ—Ä —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
          echo "üìÅ Collecting static files..."
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --noinput --clear
          
          # üë§ –°–û–ó–î–ê–ù–ò–ï –°–£–ü–ï–†–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
          echo "üë§ Creating admin user..."
          sudo docker compose -f docker-compose.production.yml exec \
            -e DJANGO_SUPERUSER_USERNAME="${{ secrets.ADMIN_USERNAME }}" \
            -e DJANGO_SUPERUSER_EMAIL="${{ secrets.ADMIN_EMAIL }}" \
            -e DJANGO_SUPERUSER_PASSWORD="${{ secrets.ADMIN_PASSWORD }}" \
            backend python manage.py create_admin || echo "‚ÑπÔ∏è Admin user creation skipped (may already exist)"
          
          # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
          echo "üîç Checking service health..."
          for i in {1..12}; do
            if sudo docker compose -f docker-compose.production.yml ps --filter "health=healthy" | grep -q "healthy"; then
              echo "‚úÖ Services are healthy"
              break
            fi
            echo "‚è≥ Waiting for services to become healthy... ($i/12)"
            sleep 10
          done
          
          # üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
          echo "‚úÖ Deployment completed! Checking final status..."
          sudo docker compose -f docker-compose.production.yml ps
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫)
          echo "üìã Recent backend logs:"
          sudo docker compose -f docker-compose.production.yml logs --tail=20 backend

#Workflow Telegram	  
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          üéâ –î–µ–ø–ª–æ–π blisterbox —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!
          
          ‚úÖ –ù–æ–≤—ã–π –±–ª–æ–≥ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç
          ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã  
          ‚úÖ –ê–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω
          ‚úÖ –°—Ç–∞—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∞
          ‚úÖ –î–∞–Ω–Ω—ã–µ PostgreSQL –∏ Redis —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
          
          üåê –°–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ